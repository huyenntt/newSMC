.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.36.
.TH PETRI "1" "July 2010" "service-technology.org" "service-technology.org"
.SH NAME
petri \- Petri Net API Frontend
.SH SYNOPSIS
.B petri
[\fIOPTIONS\fR]... [\fIFILES\fR]...
.SH DESCRIPTION
petri 4.02
.PP
A command\-line frontend for the Petri Net API
.TP
\fB\-h\fR, \fB\-\-help\fR
Print help and exit
.TP
\fB\-\-detailed\-help\fR
Print help, including all details and hidden
options, and exit
.TP
\fB\-\-full\-help\fR
Print help, including hidden options, and exit
.TP
\fB\-V\fR, \fB\-\-version\fR
Print version and exit
.SS "Input and Output:"
.TP
\fB\-i\fR, \fB\-\-input\fR=\fIFORMAT\fR
Select the input file format  (possible
values="owfn", "lola", "pnml", "sa",
"tpn" default=`owfn')
.TP
\fB\-o\fR, \fB\-\-output\fR=\fIFORMAT\fR
Select the output file format(s)  (possible
values="owfn", "lola", "pnml", "sa",
"tpn", "dot", "png", "pdf", "eps",
"svg")
.TP
\fB\-\-canonicalNames\fR[=\fIFILENAME\fR]
Renames nodes to avoid problems with conversion
.IP
to other formats. Mapping may be written to a
given file.
.TP
\fB\-f\fR, \fB\-\-formula\fR
Places a final condition at the end of LoLA
files. Has no effect to other output formats.
.IP
(default=off)
.TP
\fB\-\-removePorts\fR
Removes ports in output files.  (default=off)
.TP
\fB\-\-guessFormula\fR
Derive the final condition from the structure
(i.e., the sink place) of the net.
(default=off)
.IP
Group: Automaton Converter
.IP
Defining a program, to convert Service Automata to Petri Nets
.TP
\fB\-\-genet\fR[=\fIFILENAME\fR]
Use Genet; specify the path  (default=`genet')
.TP
\fB\-\-petrify\fR[=\fIFILENAME\fR]
Use Petrify; specify the path
(default=`petrify')
.SS "Composition and Product:"
.TP
\fB\-\-compose\fR=\fINET\fR
Compose each net given in the input section
with this net.
.TP
\fB\-\-produce\fR=\fICONSTRAINT\fR
Calculate the product.
.SS "Check for Structural Properties:"
.TP
\fB\-\-isFreeChoice\fR
Check if the Petri net is free choice, i.e. if
conflicting transitions share all pre\-places.
.IP
(default=off)
.TP
\fB\-\-isNormal\fR
Check if the Petri net is normal, i.e. every
transition is connect to at most one
interface place.  (default=off)
.TP
\fB\-\-isWorkflow\fR
Check if the Petri net has workflow structure,
i.e. it (i) has a distinct source place, (ii)
has a district sink place, and (iii) every
node lays on a path between the source place
and the sink place.  (default=off)
.TP
\fB\-c\fR, \fB\-\-check\fR=\fIPROPERTY\fR
Check a structural property of the Petri net,
see `isFreeChoice', `isNormal', and
`isWorkflow' for details.  (possible
values="freechoice", "normal",
"workflow")
.SS "Modifications:"
.TP
\fB\-r\fR, \fB\-\-reduce\fR=\fIRULES\fR
Apply structural reduction rules, i.e. reduce
the structure of the net while preserving
liveness and boundedness.  (possible
values="0", "1", "2", "3", "4",
"5", "6", "starke", "pillat",
"dead_nodes", "identical_places",
"identical_transitions", "series_places",
"series_transitions", "self_loop_places",
"self_loop_transitions", "equal_places",
"starke3p", "starke3t", "starke4",
"starke5", "starke6", "starke7",
"starke8", "starke9", "once",
"k_boundedness", "boundedness",
"liveness")
.TP
\fB\-n\fR, \fB\-\-normalize\fR
Normalize the Petri net, i.e. change to
structure such that every transition is
connected to at most one interface place.
(default=off)
.TP
\fB\-N\fR, \fB\-\-negate\fR
Negate the final condition of the net, i.e.
every specified final marking is now
non\-final. The result is the 'anti open net'.
.IP
(default=off)
.TP
\fB\-M\fR, \fB\-\-mirror\fR
Mirror the interface, i.e. change the direction
of communication  (default=off)
.TP
\fB\-\-dnf\fR
Convert final condition to disjunctive normal
form  (default=off)
.SS "Configuration:"
.TP
\fB\-\-config\fR=\fIFILE\fR
Read configuration from file.
.TP
\fB\-\-dot\fR=\fIFILENAME\fR
Set the path an binary of dot.  (default=`dot')
.TP
\fB\-\-tmpfile\fR=\fIFILENAME\fR
Set the path and name of temporary files
(default=`/tmp/petri\-XXXXXX')
.TP
\fB\-\-noClean\fR
Do not delete temporary files.  (default=off)
.SS "Debugging:"
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Show verbose output  (default=off)
.TP
\fB\-\-suffix_owfn\fR=\fISUFFIX\fR
Suffix for open net files
.TP
\fB\-\-suffix_sa\fR=\fISUFFIX\fR
Suffix for service automaton files
.TP
\fB\-\-stats\fR
Display time and memory consumption on
termination.  (default=off)
.SH EXAMPLES
To translate an open net `service.owfn' into a LoLA net and apply structural reductions, execute
.IP
petri service.owfn -olola -r6
.PP
The LoLA net will be written to the file `service.lola'.
.PP
To create a PNG from an open net `service.owfn' using Graphviz Dot, execute
.IP
petri service.owfn -opng
.PP
The graphics will be written to the file `service.png'.
.SH "EXIT STATUS"
Petri exits with 0 on success, and with >0 if an error occurs.
.SH BUGS
Petri neither contains cats nor pigs.
.PP
See https://gna.org/bugs/?group=service-tech for open bugs.
.SH AUTHOR
The Petri Net API was written by Stephan Mennicke, Christian Sura, and Robert Waltemath. It bases on code from GNU BPEL2oWFN written by Niels Lohmann and Christian Gierds. The Petri Net API Frontend was written by Niels Lohmann.
.SH COPYRIGHT
Copyright (c) 2008-2009 Stephan Mennicke, Christian Sura, Robert Waltemath, and Niels Lohmann
.PP
Copyright (c) 2005-2007 Niels Lohmann and Christian Gierds
.SH "SEE ALSO"
lola(1), mia(1), wendy(1)
